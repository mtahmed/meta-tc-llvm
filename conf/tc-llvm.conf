# Define default system toolchain (default to built-in)
TOOLCHAIN = 'gnu'

# The 'llvm' toolchain can be activated globally using:
#TOOLCHAIN = "llvm"
# Or per-package using TOOLCHAIN_pn-<package> for each <package>
# that we want to build using the secondary toolchain.
TOOLCHAIN_pn-xz      = 'llvm'
TOOLCHAIN_pn-busybox = 'llvm'

# When using the secondary llvm toolchain, we add an automatic depend on
# the LLVM toolchain and ASSUME_PROVIDED if needed.
# XXX(mtahmed): Currently, it is ASSUME_PROVIDED because we pre-build our llvm
#               toolchain. Eventually, we will add a recipe for our toolchain
#               (probably called clang or llvm_clang).
DEPENDS_append_toolchain-llvm = " virtual/TOOLCHAIN-LLVM"
ASSUME_PROVIDED .= " virtual/TOOLCHAIN-LLVM"

# Provide clang with a -target triple to help it find the gcc libs. Otherwise
# it assumes the host target triple.
TUNE_CCARGS_append_toolchain-llvm = " -target ${PACKAGE_ARCH}-poky-${TARGET_OS} "

# Override the CC, CXX, CPP variables for the llvm toolchain.
# XXX(mtahmed): This should eventually be changed when we use bitbake-built
#               secondary llvm toolchain.
CC_toolchain-llvm   = "clang ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
CXX_toolchain-llvm  = "clang++ ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
CPP_toolchain-llvm  = "clang -E${TOOLCHAIN_OPTIONS} ${HOST_CC_ARCH}"

# XXX(mtahmed): Do we need to have declare our own linker variable? I guess
#               probably not.
#LD_toolchain-llvm  = "${HOST_PREFIX}ld${TOOLCHAIN_OPTIONS} ${HOST_LD_ARCH}"
CCLD_toolchain-llvm = "${CC}"
