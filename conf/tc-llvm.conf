# There are two options for the way the secondary toolchain is used:
#
# Option 1:
# Define the global toolchain to be 'gnu' and override it for packages we want
# to build using the secondary toolchain to 'llvm'.
#
#TOOLCHAIN = 'gnu'
#TOOLCHAIN_pn-busybox = 'llvm'
#TOOLCHAIN_pn-xz      = 'llvm'

# Option 2:
# Define the global toolchain to be 'llvm' and override it for packages we want
# to build using the 'gnu' toolchain.
TOOLCHAIN = 'llvm'

# These packages fail to compile using the 'llvm' toolchain.
TOOLCHAIN_pn-linux-yocto       = 'gnu'
TOOLCHAIN_pn-linux-yocto-tiny  = 'gnu'
TOOLCHAIN_pn-dtc               = 'gnu'
TOOLCHAIN_pn-dtc_git           = 'gnu'
TOOLCHAIN_pn-dtc-native        = 'gnu'
TOOLCHAIN_pn-elfutils          = 'gnu'
TOOLCHAIN_pn-elfutils-native   = 'gnu'
TOOLCHAIN_pn-binutils-native   = 'gnu'
TOOLCHAIN_pn-gcc               = 'gnu'
TOOLCHAIN_pn-gcc-cross         = 'gnu'
TOOLCHAIN_pn-gcc-cross-initial = 'gnu'
TOOLCHAIN_pn-gcc-runtime       = 'gnu'
TOOLCHAIN_pn-prelink           = 'gnu'
TOOLCHAIN_pn-prelink-native    = 'gnu'
TOOLCHAIN_pn-eglibc            = 'gnu'
TOOLCHAIN_pn-eglibc-initial    = 'gnu'
TOOLCHAIN_pn-eglibc-native     = 'gnu'
TOOLCHAIN_pn-rpm               = 'gnu'
TOOLCHAIN_pn-rpm-native        = 'gnu'
TOOLCHAIN_pn-libgcc            = 'gnu'
TOOLCHAIN_pn-libgcc-native     = 'gnu'
TOOLCHAIN_pn-e2fsprogs         = 'gnu'
TOOLCHAIN_pn-e2fsprogs-native  = 'gnu'

# When using the secondary llvm toolchain, we add an automatic depend on
# the LLVM toolchain and ASSUME_PROVIDED if needed.
# XXX(mtahmed): Currently, it is ASSUME_PROVIDED because we pre-build our llvm
#               toolchain. Eventually, we will add a recipe for our toolchain
#               (probably called clang or llvm_clang).
# FIXME(mtahmed): This raises an error. Enable this later when it doesn't.
#DEPENDS_append_toolchain-llvm = " virtual/TOOLCHAIN-LLVM"
#ASSUME_PROVIDED_append        = " virtual/TOOLCHAIN-LLVM"

# Provide clang with a -target triple to help it find the gcc libs. Otherwise
# it assumes the host target triple.
TUNE_CCARGS_append_toolchain-llvm = " -target ${PACKAGE_ARCH}-poky-${TARGET_OS} "
TUNE_CCARGS_toolchain-gnu = ""

# Override the CC, CXX, CPP variables for the llvm toolchain.
# XXX(mtahmed): This should eventually be changed when we use bitbake-built
#               secondary llvm toolchain.
CC_toolchain-llvm  = "clang ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
CXX_toolchain-llvm = "clang++ ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
CPP_toolchain-llvm = "clang -E${TOOLCHAIN_OPTIONS} ${HOST_CC_ARCH}"
# We also have to define the default toolchain for 'gnu':
CC_toolchain-gnu   = "${CCACHE}${HOST_PREFIX}gcc ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
CXX_toolchain-gnu  = "${CCACHE}${HOST_PREFIX}g++ ${HOST_CC_ARCH}${TOOLCHAIN_OPTIONS}"
CPP_toolchain-gnu  = "${HOST_PREFIX}gcc -E${TOOLCHAIN_OPTIONS} ${HOST_CC_ARCH}"

# XXX(mtahmed): Do we need to have declare our own linker variable? I guess
#               probably not.
#LD_toolchain-llvm  = "${HOST_PREFIX}ld${TOOLCHAIN_OPTIONS} ${HOST_LD_ARCH}"
#CCLD_toolchain-llvm = "${CC}"
